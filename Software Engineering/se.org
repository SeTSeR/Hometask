Кулямин Виктор Вячеславович, kuliamin@ispras.ru
https://sites.google.com/view/msusecourse

* Основные принципы программной инженерии
SE - дисциплина, изучающая методы создания, сопровождения и анализа свойств программных систем. В основе SE нет фундаментальной науки,
не получается отделить общие свойства программных систем от конкретных задач. В отличие от Computer Science, нет чёткой постановки
задачи, что ведёт к возможности бесконечного развития программных систем.
Программная инеженерия:
1. Взаимодействие с людьми с целью извлечения знаний о требованиях к системе.
2. Командная разработка и управление ей.
3. Микроэкономическая задача - максимизация выхлопа от системы при минимальном количестве затрат.
Особенность программной инженерии - необходимость поддержки системы, т. е. приспособления её под постоянно изменяющиеся задачи.

Принцип модульности - разбиение системы на максимально независимые функциональные части с максимально простым и
максимально устойчивым(слабо меняющимся) интерфейсом взаимодействия. Для этого интерфейс должен обладать следующими свойствами:
1. Адекватность - соответствие интерфейса решаемым задачам.
2. Полнота - все нужные операции для решения задач присутствуют в интерфейсе.
3. Простота и естественность.
4. Минимальность(не обязательно).

Абстракция и уточнение. Повторное использование уже созданных частей системы.
* Процесс разработки программных систем
Жизненный цикл системы - период от появления идеи системы до вывода её из эксплуатации.

Жизненный цикл:
0. Определение требований.
1. Проектирование решения.
2. Реализация решения.
3. Контроль качества(QA).
4. Развёртывание в продакшене.

Модели жизненного цикла:
1. Водопадная модель. Характеристики: стабильность, негибкость разработки, возможность планирования, понятность и простота управления.
2. Итерационная модель. Характеристики: более гибкая, но при этом всё ещё достаточно простая и понятная. Планирование сроков при этом затруднено за счёт возвратов.
   * Спиральная модель. Все итерации имеют одинаковую структуру, что упрощает планирование.

Описание технологического процесса - описание ролей и распределения их по людям.
ISO, IEEE, ГОСТ
Стандарты описания процесса разработки: ISO 15288, ISO 15504, ISO 12207
CMMI стандартизирует *уровни организации*:
1. initial - любая организация.
2. managed - разработка + статистика по ресурсам.
3. defined - описан тех. процесс разработки, соответствующий реальности.
4. quantitatively managed - помимо тех. процесса описаны метрики, используемые для планирования затрат.
5. optimizing - всё предыдущее + есть подразделение, "обучающее" тех. процесс и метрики.

Виды процессов в ISO 12207:
1. Системные
   + Процессы для ведения переговоров: приобретение и поставка ПО
   + Организационные процессы: управление моделью lifecycle, управление инфраструктурой, управление портфолио проектов, управление персоналом и управление качеством.
   + Проектные процессы: планирование, оценка и контроль, измерение.
   + Технические процессы: определение и анализ требований, проектирование системы в целом, реализация, интеграция, развёртывание, поддержка приёмки, удаление
2. Процессы для ПО
   + Процессы реализации.
   + Процессы поддержки ПО.
   + Процессы повторного использования ПО.

RUP и XP.
* RUP и XP
RUP - модели: варианты использования и архитектура. XP - управление командой.
Жизненный цикл в RUP: Inception, Elaboration, Construction, Transition.
Inception - установление ключевых людей.
Elaboration - выработка требований и создание архитектуры.
Construction - основной этап написания кода и построения системы.
Transition - передача системы в эксплуатацию.

Отдельные фазы могут повторяться.

Модель требований, модель анализа, модель проектирования, модель реализации, модель развёртывания, модель тестирования.
* Анализ требований к ПО
Анализ предметной области. Для визуализации предметной области используется схема Захмана. Для этого расписываются ответы на следующие вопросы:
- зачем -- цели
- кто -- роли, обязанности
- что -- данные
- как -- функции
- где -- пространственные характеристики
- когда -- временные ограничения
DataFlowDiagrams -- основные бизнес-процессы и потоки данных между ними + внешние сущности и хранилища. Entity-Relationship Diagrams используются для визуализации структур данных.
Анализ требований:
1. Определение требований.
   1. Определение источников.
   2. Выделение и каталогизация требований.
   3. Согласование.
2. Систематизация и описание каталога.
3. Валидация требований.
Свойства требований по IEEE830:
1. Адекватность.
2. Полнота.
3. Однозначность.
4. Согласованность.
5. Упорядоченность по важности и стабильности.
6. Прослеживаемость.
7. Проверяемость.
8. Модифицируемость.
Источники набора функций(C-требования):
- пожелания
- проблемы
- стандарты
- существующие системы
Ограничения предметной области
D-требования(оно же ТЗ, оно же Requirements Specification)
* Обеспечение качества ПО
ISO 25010
|------------------------+---------|
| Функциональность       | Ошибки  |
|------------------------+---------|
| Надёжность             | defect  |
| Производительность     | failure |
| Переносимость          | fault   |
| Совместимость          | error   |
| Защищённость           |         |
| Удобство использования |         |
| Удобство сопровождения |         |
|------------------------+---------|

Источники ошибок:
1. Неправильное понимание задач.
2. Неправильные решения задач.
3. Неправильный перенос решений в код.

В первом случае единственный действевнный способ борьбы с ошибками - переформулирование задачи в другом виде
с целью поиска пробелов в понимании. Во втором случае работают уже тесты с рассмотрением разных corner cases.
В третьем случае можно сверяться с проектными решениями, использовать статический анализ, etc. Чем ниже ошибка,
тем больше способов борьбы с ней.

Предотвращение, обнаружение и исправление ошибок. Методы предотвращения ошибок:
1. Стандартизация используемых технологий, интерфейсов, библиотек и документирование этого всего.
2. Применение методов обнаружения ошибок как можно раньше.
3. Запись ограничений на языке программирования: типы, контракты, etc.
Методы обнаружения ошибок(методы контроля качества):
1. Валидация - проверка артефакта разработки экспертом
2. Верификация - сопоставление артефактов разработки, отделённых от человека
  a. Экспертиза
  b. Статический анализ
  c. Динамический анализ, в частности, тестирование
  d. Формальные методы: дедуктивная верификация и model checking

Аспекты тестирования:
1. Проверяемые свойства, в частности
  a. Соответствие стандарту(в частности, сертификационные тесты)
  b. Регрессионное тестирование
2. Источник информации:
  a. Чёрный ящик -- тестирование с использованием только требований
  b. Белый ящик -- тестирование с использованием знаний о внутренней структуре
  c. Серый ящик -- тестирование с использованием требований и знаний о внутренней структуре
  d. Тестирование на отказ, в частности sanity testing/smoke testing и нагрузочное/стрессовое тестирование
3. Уровень:
  a. Модульное тестирование
  b. Интеграционное тестирование
  c. Системное тестирование
* Архитектура ПО
1. Анализ области решений
2. Проектирование
   1. Выделение сценариев
   2. Роспись сценариев
   3. Набор компонент и интерфейсов
   4. Архитектура должна выстраиваться в соответствии с некоторым архитектурным стилем
3. Анализ архитектур
   1. SAAM
      1. Описать набор сценариев развития
      2. Описать архитектуру(архитектуры)
      3. Для каждого сценария описать последствия его реализации в рамках заданной архитектуры
      4. Оценить архитектуру(архитектуры) на основе оценки сценариев
4. Виды архитектур
   1. Конвейер
      1. Каналы и фильтры(push и pull фильтры(энергичная vs ленивая пересылка данных))
      2. Замкнутый цикл управления
   2. Хранилище
      1. Репозиторий
      2. Black board
   3. Вызов-возврат
      1. Процедурная декомпозиция
      2. Абстрактные типы данных
      3. Многоуровневые системы
   4. Интерактивные системы
      1. MVC
      2. PAC(presentation-abstraction-control)
   5. Обработка команд
      1. Интерпретатор
      2. VM
5. Шаблоны:
   1. Архитектурные стили
   2. Образцы анализа
   3. Образцы проектирования
   4. Идиомы
   5. Образцы организации процессов
17 марта КР
