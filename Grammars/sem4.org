#+LATEX_HEADER:\usepackage{amsmath}
#+LATEX_HEADER:\usepackage{esint}
#+LATEX_HEADER:\usepackage[english,russian]{babel}
#+LATEX_HEADER:\usepackage{mathtools}
#+LATEX_HEADER:\usepackage{amsthm}
#+LATEX_HEADER:\usepackage[top=0.8in, bottom=0.75in, left=0.625in, right=0.625in]{geometry}

* Задача 1
Грамматика языка $D_1$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow (S), \\
S \rightarrow SS, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}
Данная грамматика не является LL(1)-грамматикой, но её можно привести к таковой, устранив
левую рекурсию:
\begin{equation}
\begin{cases}
S \rightarrow (S)S, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}
#+end_export
Здесь и далее под $\varepsilon$ понимается пустое слово.

Фактически, (1) представляет собой определение ПСП в виде грамматики.
* Задача 2
Грамматика языка $\{a^nb^n, n \geq 0\}$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSb, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}
Данная грамматика пригодна к разбору методом рекурсивного спуска.

Покажем, что эта грамматика действительно описывает все слова вида $a^nb^n, n \geq 0$. Для
этого воспользуемся методом математической индукции. При $n = 0$, это, очевидно, так, вследствие
второго правила. Пусть теперь для всех слов вида $a^nb^n, n \leq k$ существует цепочка вывода,
приводящая к стартовому нетерминалу. Рассмотрим строку вида $a^{k + 1}b^{k + 1}$. Эта строка
представляется в виде $aa^kb^kb$. По предположению индукции, для строки $a^kb^k$ есть цепочка
вывода, приводящая к $S$. Добавляя к этой цепочке применение правила $S \rightarrow aSb$,
получаем цепочку вывода для исходной строки. Таким образом, действительно можно получить все
слова данного языка.
#+end_export
* Задача 3
Грамматика языка $\{a^nb^m, 0 \leq n \leq m \leq 2n\}$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSb, \\
S \rightarrow aSbb, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}
Данная грамматика является неоднозначной: строка $aabbb$ может быть разобрана двумя способами:
\begin{equation}
S \stackrel{(1)}{\rightarrow} aSb \stackrel{(2)}{\rightarrow} aaSbbb \stackrel{(3)}{\rightarrow} aabbb
\end{equation}
или
\begin{equation}
S \stackrel{(2)}{\rightarrow} aSbb \stackrel{(1)}{\rightarrow} aaSbbb \stackrel{(3)}{\rightarrow} aabbb.
\end{equation}
Стрелки означают применение правила грамматики, номер над стрелкой -- номер применяемого правила.

Разрешить эту неоднозначность можно путём приоритизации правил грамматики, или путём ввода
новых правил.

Рассмотрим слово вида $a^nb^{n + k}, n \geq 0, 0 \leq k \leq n$ и произвольную цепочку, состоящую
из $k$ применений второго правила, $n - k$ применений первого правила и завершающего применения
третьего правила. Результатом применения этой цепочки к $S$ будет слово, начинающееся с
$k + (n - k) = n$ букв $a$ и заканчивающееся $(n - k) + 2k = n + k$ буквами $b$. Поскольку
такое построение выполнимо $\forall n, k, n \geq 0, 0 \leq k \leq n$, то эта грамматика описывает
все слова заданного языка.
#+end_export
* Задача 4
Грамматика языка $L_=$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSb, \\
S \rightarrow bSa, \\
S \rightarrow SS, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}
Аналогично первой задаче эту грамматику можно привести к LL(1)-грамматике.

Понятно, что любое слово, порождаемое этой грамматикой, принадлежит $L_=$. Рассмотрим теперь
слово $w$ минимальной длины, принадлежащее $L_=$, но не описываемое данной грамматикой. Ни один
собственный префикс этого слова не принадлежит $L_=$. Если бы это было так, то этот префикс
и соответствующий суффикс должны были бы описываться приведённой грамматикой, что означало бы,
что $w$ также описывается ею.

Пусть слово $w$ начинается с $a$(если оно начинается с $b$ рассуждения аналогичны, только нужно
поменять местами $a$ и $b$). Будем рассматривать префиксы слова $w$ чётной длины. Можно считать,
что $|w| > 2$(слова из $L_=$ длины 2 гарантированно описываются заданной грамматикой), поэтому
имеется хотя бы один собственный префикс. Первый собственный префикс не может быть никаким,
кроме $aa$, во всех последующих собственных префиксах(чётной длины!) количество букв $a$
больше количества букв $b$ хотя бы на 2(в самом деле, приписывание последовательности $aa$
увеличивает эту разницу на 2, $ab$ и $ba$ её не меняют, а $bb$ уменьшает её на 2. При этом,
она не обращается в ноль, как было показано ранее). Тогда это же свойство выполнено для
префикса, не включающего последние две буквы. Поскольку $w \in L_=$, последние две буквы
обязательно должны быть $bb$. Но это означает, что дважды применив первое правило грамматики,
мы снова получим слово из $L_=$. Более того, это слово должно описываться нашей грамматикой,
поскольку $w$ было словом минимальной длины. Но тогда и само слово $w$ описывается ею.
Получили противоречие. Значит, все слова из $L_=$ описываются этой грамматикой, ч. т. д.
#+end_export
* Задача 6
Грамматика языка $\{a^ib^jc^k | i = j \vee j = k\}$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow AC, \\
S \rightarrow A'B, \\
A \rightarrow aAb, \\
A \rightarrow \varepsilon, \\
C \rightarrow cC, \\
C \rightarrow \varepsilon, \\
A' \rightarrow aA', \\
A' \rightarrow \varepsilon, \\
B \rightarrow bBc, \\
B \rightarrow \varepsilon
\end{cases}
\end{equation}
Данная грамматика является неоднозначной, поскольку например строку $abc$ можно разобрать
несколькими способами:
\begin{equation}
S \stackrel{(1)}{\rightarrow} AC \stackrel{(3)}{\rightarrow} aAbC \stackrel{(4)}{\rightarrow}
abC \stackrel{(5)}{\rightarrow} abcC \stackrel{(6)}{\rightarrow} abc
\end{equation}
или
\begin{equation}
S \stackrel{(2)}{\rightarrow} A'B \stackrel{(7)}{\rightarrow} aA'B \stackrel{(8)}{\rightarrow}
aB \stackrel{(9)}{\rightarrow} abBc \stackrel{(10)}{\rightarrow} abc
\end{equation}

Слова этого языка разбиваются на две группы:
\begin{equation}
a^nb^nc^k, n \geq 0, k \geq 0
\end{equation}
и
\begin{equation}
a^kb^nc^n, n \geq 0, k \geq 0
\end{equation}
Слова вида $a^nb^n$ и $b^nc^n$ можно описать посредством грамматики, рассмотренной в задаче 2.
Слова вида $c^k$ описываются регулярной грамматикой:
\begin{equation}
\begin{cases}
C \rightarrow cC, \\
C \rightarrow \varepsilon
\end{cases}
\end{equation}
#+end_export
* Задача 7
Грамматика языка $PAL$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSa, \\
S \rightarrow bSb, \\
S \rightarrow a, \\
S \rightarrow b, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}

По индукции можно доказать, что все слова, порождаемые этой грамматикой, являются палиндромами.
Рассмотрим теперь любой палиндром конечной длины не меньше 2. Поскольку это палиндром, первая и последняя
буквы у него совпадают. Кроме того, отбросив первую и последнюю буквы по первому или второму
правилу, мы снова придём к палиндрому. Повторяя эту операцию, мы рано или поздно придём либо
к пустому слову, либо к слову длины 1. Эти слова также описаны в грамматике.

К разбору методом рекурсивного спуска эта грамматика неприменима, поскольку при появлении
символа $a$ независимо от следующего символа у нас нет никакого способа выбрать, использовать
первое или третье правило.
#+end_export
* Задача 8
Грамматика языка $\overline{PAL}$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSa, \\
S \rightarrow bSb, \\
S \rightarrow aTb, \\
S \rightarrow bTa, \\
T \rightarrow aT, \\
T \rightarrow bT, \\
T \rightarrow \varepsilon
\end{cases}
\end{equation}

Эта грамматика не принимает никакие палиндромы. В самом деле, последовательно применяя к ним
правила 1 и 2(а никакие другие правила к ним применить нельзя), мы в итоге приходим либо к
пустому слову, либо к однобуквенным словам. Никакие из этих слов в язык этой грамматики не
входят.

Покажем теперь, что любые слова, отвергаемые грамматикой из предыдущей задачи, будут
приниматься этой грамматикой. Пусть слово $w$ отвергается грамматикой из предыдущей задачи
(т.е не является палиндромом).
Можно считать, что в этом случае $|w| >= 2$ и первая и последняя буквы этого слова отличаются.
Если это не так, будем применять к $w$ первые два правила до тех пор, пока эти условия не
выполнятся. Поскольку первая и последняя буквы этого слова отличаются, мы можем их отбросить
по третьему или четвёртому правилу. В результате получится вообще говоря произвольная
последовательность букв $a$ и $b$(возможно, пустая). Эта последовательность разбирается с
помощью последних трёх правил.
#+end_export
* Задача 10
Грамматика языка из всех слов нечётной длины с символом $a$ по центру:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSb, \\
S \rightarrow bSa, \\
S \rightarrow aSa, \\
S \rightarrow bSb, \\
S \rightarrow a
\end{cases}
\end{equation}

Порядок разбора слов аналогичен предыдущим двум задачам: удаляем по одному символу с начала
и конца по первым четырём правилам до тех пор, пока не дойдём до $a$, которое разберётся
последним правилом.
#+end_export
* Задача 11
Грамматика языка $L_2 = \{w | |w|_a = 2|w|_b\}$:
#+begin_export latex
\begin{equation}
\begin{cases}
S \rightarrow aSbSa, \\
S \rightarrow aSaSb, \\
S \rightarrow bSaSa, \\
S \rightarrow SS, \\
S \rightarrow \varepsilon
\end{cases}
\end{equation}

По индукции доказывается, что все слова, порождаемые этой грамматикой, принадлежат $L_2$.
Пусть $K$ - язык, порождаемый этой грамматикой, а $w$ - слово минимальной длины из
$L_2 \backslash K$. Используя рассуждения, аналогичные тем, что в задаче 4, можно показать,
что ни один из собственных префиксов $w$ не принадлежит $L_2$. Рассмотрим на префиксе $w$ длины
$i$ функцию $S_i = |w|_a - 2|w|_b$. Поскольку пустое слово и слово $w$ принадлежат $L_2$, то
$S_0 = S_{|w|} = 0$. Кроме того, $S_i \neq 0, i \in \overline{1, |w| - 1}$.
#+end_export
